// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id              String    @id @default(uuid())
  name            String
  userId          String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Billboard {
  id String @id @default(uuid())
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  storeId String
  label String
  imageUrl String
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id String @id @default(uuid())
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  storeId String // Foreign Key to Store
  billboard Billboard @relation(fields: [billboardId], references: [id])
  billboardId String // Foreign Key to Billboard
  products Product[] @relation("CategoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime   @updatedAt
  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  store Store @relation("StoreToSize", fields: [storeId], references: [id])
  storeId String
  products Product[] @relation("SizeToProduct")
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model Color {
  id String @id @default(uuid())
  store Store @relation("StoreToColor", fields: [storeId], references: [id])
  storeId String
  products Product[] @relation("ColorToProduct")
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  storeId String  // Foreign Key to Store
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  categoryId String // Foreign Key to Category
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  size Size @relation("SizeToProduct", fields: [sizeId], references: [id])
  sizeId String   // Foreign Key to Size
  color Color @relation("ColorToProduct", fields: [colorId], references: [id])
  colorId String  // Foreign Key to Color
  images Image[] // Relation to Image model
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String @id @default(uuid())
  product Product @relation(fields: [producId], references: [id], onDelete: Cascade)
  producId String // Foreign Key to Product
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([producId])
}

model Order {
  id String @id @default(uuid())
  storeId String // Foreign Key to Store
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String // Foreign Key to Order
  order Order @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}